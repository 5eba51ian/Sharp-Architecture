////-------------------------------------------------------------------------------------------------
//// <auto-generated> 
//// Marked as auto-generated so StyleCop will ignore BDD style tests
//// </auto-generated>
////-------------------------------------------------------------------------------------------------

//#pragma warning disable 169
//// ReSharper disable InconsistentNaming

//namespace Tests.SharpArch.Domain.NHibernateValidator.ValidatorProvider
//{
//    using System;
//    using System.Collections.Generic;
//    using System.Linq;
//    using System.Linq.Expressions;
//    using System.Web.Mvc;

//    using global::SharpArch.NHibernate.NHibernateValidator.ValidatorProvider;

//    using NHibernate.Validator.Constraints;

//    using NUnit.Framework;

//    [TestFixture]
//    public class NHibernateValidatorClientProviderTests
//    {
//        #region Constants and Fields

//        private ControllerContext _controllerContext;

//        private NHibernateValidatorClientProvider _validatorProvider;

//        private ViewDataDictionary<TestModel> _viewData;

//        #endregion

//        #region Public Methods

//        [Test]
//        public void ClientValidation_LengthProperty()
//        {
//            ModelClientValidationRule validationRule = ClientValidation_AssertRule(
//                x => x.LengthProperty, "length", "length_message");
//            Assert.That(validationRule.ValidationParameters["min"], Is.EqualTo(3));
//            Assert.That(validationRule.ValidationParameters["max"], Is.EqualTo(10));
//        }

//        [Test]
//        public void ClientValidation_MaxPropertyProperty()
//        {
//            ModelClientValidationRule validationRule = ClientValidation_AssertRule(
//                x => x.MaxProperty, "range", "max_message");
//            Assert.That(validationRule.ValidationParameters["max"], Is.EqualTo(10));
//        }

//        [Test]
//        public void ClientValidation_MinPropertyProperty()
//        {
//            ModelClientValidationRule validationRule = ClientValidation_AssertRule(
//                x => x.MinProperty, "range", "min_message");
//            Assert.That(validationRule.ValidationParameters["min"], Is.EqualTo(3));
//        }

//        [Test]
//        public void ClientValidation_NotEmptyStringProperty()
//        {
//            ClientValidation_AssertRule(x => x.NotEmptyStringProperty, "required", "not_empty_message");
//        }

//        [Test]
//        public void ClientValidation_NotNullProperty()
//        {
//            ClientValidation_AssertRule(x => x.NotNullProperty, "required", "not_null_message");
//        }

//        [Test]
//        public void ClientValidation_PatternProperty()
//        {
//            ModelClientValidationRule validationRule = ClientValidation_AssertRule(
//                x => x.PatternProperty, "regex", "pattern_message");
//            Assert.That(validationRule.ValidationParameters["pattern"], Is.EqualTo("[a-zA-Z]{3,10}"));
//        }

//        [Test]
//        public void ClientValidation_RangeProperty()
//        {
//            ModelClientValidationRule validationRule = ClientValidation_AssertRule(
//                x => x.RangeProperty, "range", "range_message");
//            Assert.That(validationRule.ValidationParameters["min"], Is.EqualTo(3));
//            Assert.That(validationRule.ValidationParameters["max"], Is.EqualTo(10));
//        }

//        [SetUp]
//        public void SetUp()
//        {
//            _viewData = new ViewDataDictionary<TestModel>();
//            _controllerContext = new ControllerContext();
//        }

//        #endregion

//        #region Methods

//        private ModelClientValidationRule ClientValidation_AssertRule<TValue>(
//            Expression<Func<TestModel, TValue>> property, string validationType, string errorMessate)
//        {
//            ModelMetadata modelMetadata = ModelMetadata.FromLambdaExpression(property, _viewData);

//            Assert.That(modelValidators, Is.Not.Empty);

//            List<ModelClientValidationRule> validationRules =
//                modelValidators.SelectMany(x => x.GetClientValidationRules()).ToList();

//            Assert.That(validationRules.Count, Is.EqualTo(1));

//            ModelClientValidationRule validationRule = validationRules[0];

//            Assert.That(validationRule.ValidationType, Is.EqualTo(validationType));
//            Assert.That(validationRule.ErrorMessage, Is.EqualTo(errorMessate));

//            return validationRule;
//        }

//        #endregion

//        private class TestModel
//        {
//            #region Properties

//            [Length(Message = "length_message", Min = 3, Max = 10)]
//            public string LengthProperty { get; set; }

//            [Max(Message = "max_message", Value = 10)]
//            public string MaxProperty { get; set; }
//            [Min(Message = "min_message", Value = 3)]
//            public string MinProperty { get; set; }
//            [NotEmpty(Message = "not_empty_message")]
//            public string NotEmptyStringProperty { get; set; }
//            [NotNull(Message = "not_null_message")]
//            public string NotNullProperty { get; set; }

//            [Pattern(Message = "pattern_message", Regex = "[a-zA-Z]{3,10}")]
//            public string PatternProperty { get; set; }
//            [NHibernate.Validator.Constraints.Range(Message = "range_message", Min = 3, Max = 10)]
//            public int RangeProperty { get; set; }

//            #endregion
//        }
//    }
//}